" PLUG {
" ====
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'                                         " tim pope's defaults
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'kien/rainbow_parentheses.vim'
Plug 'justincampbell/vim-eighties'
Plug 'vim-airline/vim-airline'                                    " TODO: Configure
Plug 'tommcdo/vim-exchange'                                       " TODO: Practice
Plug 'tpope/vim-fugitive'                                         " TODO: Practice
Plug 'tpope/vim-rhubarb'                                          " TODO: Configure + Learn
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'                                         " TODO: Use more
Plug 'tpope/vim-repeat'
Plug 'janko/vim-test'                                             " TODO: Config
Plug 'svermeulen/vim-cutlass'                                     " TODO: Practice
Plug 'svermeulen/vim-yoink'                                       " TODO: Practice
Plug 'svermeulen/vim-subversive'                                  " TODO: Practice
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'wellle/targets.vim'                                         " TODO: Practice
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " TODO: Practice
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-emoji'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/vim-easy-align'                                    " TODO: Practice
Plug 'junegunn/gv.vim'                                            " TODO: Practice
Plug 'junegunn/vim-peekaboo'                                      " TODO: Practice
Plug 'junegunn/vim-after-object'                                  " TODO: Practice
Plug 'FooSoft/vim-argwrap'                                        " TODO: Practice
Plug 'AndrewRadev/splitjoin.vim'                                  " TODO: Practice
Plug 'junegunn/vim-plug'                                          " TODO: Practice
" Plug 'sirver/ultisnips'                                         " TODO: Configure + Learn
" Plug 'neoclide/coc.nvim', {'do': './install.sh nightly'}          " TODO: Configure + Learn
Plug 'brooth/far.vim'                                             " TODO: Learn
Plug 'romainl/vim-qf'                                             " TODO: Learn
call plug#end()
" }

" CONFIG {
" ======
set synmaxcol=200 " TODO: review
set nowrap " TODO: doc
set showmatch " show matching brackets
set wildmode=list:longest,list:full "Show menu with possible tab competions
set wildignore+=.git,.svn
set wildignore+=*.o,*.obj,*.jpg,*.png,*.gif,*.log,*.gz,*.bin,*.gem,*.rbc,*.class
set wildignore+=*.min.js,**/node_modules/**,**/images/**
set wildignore+=**/assets/**/original/**,**/assets/**/thumb/**,**/assets/**/small/**
set wildignore+=tmp,public,vendor/bundle/*,vendor/cache/*,test/fixtures/*,vendor/gems/*,spec/cov,a/*
set wildignore+=sorbet/*
colorscheme dracula
set tabstop=2 " Tabs are 2 spaces
set softtabstop=2 " TODO: Document
set shiftwidth=2 " Tabs under smart indent
set smartindent " TODO: Document
set expandtab " TODO: Document
set cursorline " TODO: Document
set number " TODO: Document
set hidden " allow switching buffers without writing to disk
set ignorecase " TODO: Document
set smartcase " TODO: Document
set title " Set terminal title to filename
set nobackup " TODO: Document
set nowritebackup " TODO: Document
set noswapfile " TODO: Document
set updatetime=100 " Throttle to write on disk (default is 4s). This also governs the 'after save (CursorHold)' hooks
if exists('&inccommand')
  set inccommand=nosplit " shows the effects of a command incrementally as you type
endif
" highlight all non ascii characters
syntax match nonascii "[^\x00-\xFF]"
highlight nonascii guibg=Red ctermbg=2
" }

" MAPPINGS {
" ========
let mapleader = ' ' " set leader key

vnoremap < <gv " TODO: Document
vnoremap > >gv " TODO: Document
vnoremap . :normal .<CR> " Apply . repeats to the visual block
nnoremap <esc><esc> :noh<return><esc> " Remove the highlighted search after two esc
map Y y$ " TODO: Document
map <leader>p :set invpaste paste?<CR> " paste mode toggler

" window navigation mappings
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

" append characters end of line
nnoremap <leader>, A,<ESC>
nnoremap <leader>; A;<ESC>
nnoremap <leader>: A:<ESC>

" PLUGINS {
" =======

" vim-test {
let test#ruby#rspec#executable = 'bundle exec rspec %'
nnoremap <leader>t :TestNearest<cr>
" }

" nerdtree {
let NERDTreeWinPos = 'left' " left
let NERDTreeMinimalUI = 1   " without ? nor bookmarks
let NERDTreeIgnore=['node_modules$[[dir]]']
map <leader>n <ESC>:NERDTreeToggle<RETURN>
map <leader>f <ESC>:NERDTreeFind<RETURN>
"}

" vim-airline {
" TODO: Look at extensions
let g:airline_theme='dracula'
" }

" vim-fugitive {
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gb :Gblame<CR>
" }

" vim-gv {
nnoremap <leader>gl :GV!<CR>
nnoremap <leader>gL :GV<CR>
" }

" rainbow_parentheses {
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }

" vim-yoink {
let g:yoinkIncludeDeleteOperations=1 " make it compatible with vim-cutlass
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)
nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
" }

" vim-cutlass {
nnoremap m d
xnoremap m d
nnoremap mm dd
nnoremap M D
" }

" vim-subversive {
nmap s <plug>(SubversiveSubstitute)
xmap s <plug>(SubversiveSubstitute)
nmap ss <plug>(SubversiveSubstituteLine)
nmap S <plug>(SubversiveSubstituteToEndOfLine)
nmap <leader>s <plug>(SubversiveSubstituteRange)
xmap <leader>s <plug>(SubversiveSubstituteRange)
nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
xmap p <plug>(SubversiveSubstitute)
xmap P <plug>(SubversiveSubstitute)
" }

" ale {
let g:ale_sign_error = 'E'
let g:ale_sign_warning = '!'
let g:airline#extensions#ale#enabled = 1 " Integrate with vim-airline
let g:ale_lint_on_text_changed = 'never' " Do not run when text changes
let g:ale_sign_column_always = 1         " Always show the sign column
let g:ale_linter_aliases = {
\ 'typescriptreact': 'typescript',
\ 'javascriptreact': 'javascript'
\}
let g:ale_linters = {
\ 'javascript': ['eslint', 'flow-language-server'],
\ 'typescript': ['tsserver', 'tslint', 'eslint'],
\ 'ruby': ['rubocop', 'ruby']
\}
let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\ 'javascript': ['eslint', 'prettier'],
\ 'typescript': ['prettier'],
\ 'typescriptreact': ['prettier'],
\ 'jsx': ['eslint']
\}
nnoremap <leader>lf :ALEFix<CR>
nnoremap <leader>lo :lopen<CR>
nnoremap <leader>lc :lclose<CR>
"}

" fzf {
let g:fzf_command_prefix = 'FZF'
" TODO: Use ripgrem
command! -bang -nargs=* FZFGGrep
\ call fzf#vim#grep(
\   'git grep --line-number '.shellescape(<q-args>), 0,
\   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
nnoremap <leader><leader>f :FZFFiles<cr>
nnoremap <leader><leader>b :FZFBuffers<cr>
nnoremap <leader><leader>g :FZFGGrep<space>
nnoremap <leader><leader>G :FZFGGrep <c-r><c-w><cr>
"}

"vim-emoji {
set completefunc=emoji#complete " To be used with C-x C-u
"}

" vim-gitgutter {
let g:gitgutter_map_keys = 0 " Do not remap any keys
" }

" vim-easy-align {
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }

" vim-after-object {
autocmd VimEnter * call after_object#enable(['[', ']'], '=', ':', '-', '#', ' ')
" }

" vim-argwrap {
nnoremap <leader>a :ArgWrap<CR>
" }

" split-join {
let g:splitjoin_ruby_curly_braces = 0
let g:splitjoin_ruby_hanging_args = 0
" }

" far {
let g:far#source = 'rg'
" }

" GUI STUFF {
" =========
if has("gui_running")
  set guioptions-=T " no toolbar set guioptions-=m " no menus
  set guioptions-=r " no scrollbar on the right
  set guioptions-=R " no scrollbar on the right
  set guioptions-=l " no scrollbar on the left
  set guioptions-=b " no scrollbar on the bottom

  set guifont=*
  set guifont=Knack\ Regular\ Nerd\ Font\ Complete:h14
endif
" }
