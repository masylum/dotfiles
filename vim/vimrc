execute pathogen#infect()

set shell=sh
set synmaxcol=200

" CONF {
" --------------------------------

"Set leader key
let mapleader = ","
set nocompatible " We don't want vi compatibility.

" Ignore extension files
set term=ansi
set termencoding=utf-8
set encoding=utf-8
scriptencoding utf-8
"}

" Decrease vim command timeout
set ttimeout
set ttimeoutlen=100

" VISUALS {
" --------------------------------
set nowrap
set showmatch " show matching brackets
set showcmd
set listchars=eol:⏎,tab:␉·,trail:␠

"Show menu with possible tab competions
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=.git,.svn
set wildignore+=*.o,*.obj,*.jpg,*.png,*.gif,*.log,*.gz,*.bin,*.gem,*.rbc,*.class
set wildignore+=*.min.js,**/node_modules/**,**/images/**
set wildignore+=**/assets/**/original/**,**/assets/**/thumb/**,**/assets/**/small/**
set wildignore+=tmp,public,vendor/bundle/*,vendor/cache/*,test/fixtures/*,vendor/gems/*,spec/cov,a/*

syntax enable
:set t_Co=256 " For certain color-limited terminals
colorscheme dracula
" colorscheme nova
" colorscheme gruvbox
set background=dark
"}

" PLUGINS {
" --------------------------------

" Minibuffer Explorer Settings
let g:miniBufExplorerMoreThanOne = 1   " Open only when having more than one buffer
let g:miniBufExplUseSingleClick = 1    " Use single click
let g:miniBufExplCheckDupeBufs = 0     " Disable duplicated names feature
let g:miniBufExplShowBufNumbers = 1    " Omit buffer number
let g:miniBufExplModSelTarget = 1

" Vim test
let test#strategy = "dispatch"
let test#ruby#rspec#executable = 'bundle exec rspec %'
nnoremap <leader>t :TestNearest<cr>

" Javascript
" let g:javascript_plugin_flow = 1

" NERDTree
let NERDTreeWinPos = "left"      " left
let NERDTreeMouseMode = 3        " single click
let NERDTreeMinimalUI = 1        " without ? nor bookmarks
"}

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme='dracula'
let g:airline#extensions#neomake#enabled = 1
let g:airline#extensions#branch#enabled = 1

" Neomake
autocmd! BufReadPost,BufWritePost * Neomake

let g:neomake_ruby_enabled_makers = ['rubocop', 'reek']
let g:neomake_ruby_rubocop_maker = { 'exe': 'bundle', 'args': ['exec', 'rubocop', '--format', 'emacs'] }
let g:neomake_ruby_reek_maker = { 'exe': 'bundle', 'args': ['exec', 'reek'] }
let g:neomake_javascript_enabled_makers = ['eslint']

" Grepper
nnoremap <leader>g :Grepper<cr>
let g:grepper = { 'next_tool': '<leader>g' }
" Use `gs` to search the current visual selection
" or with a motion (like gsiw)
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)

" Fugitive
" :command -nargs=+ Ggr execute 'silent Ggrep!' <q-args> | cw | redraw!
let g:jsx_ext_required = 0

" vim-ctrlp
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
let g:ctrlp_use_caching = 0

" ultisnip
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
" ---------------------------------------------------
" }

set tabstop=2 " Tabs are 2 spaces
set softtabstop=2
set shiftwidth=2 " Tabs under smart indent
set autoindent
set smartindent
filetype plugin indent on
set smarttab
set expandtab

"Cursor line
set cursorline
set number

"Allow switching buffers without writing to disk
set hidden

" SEARCH {
" --------------------------------
" Set incremental search
set incsearch
set hlsearch

" Set ignorecase
set ignorecase
set smartcase
"}

" Set terminal title to filename
set title

" Mappings {

vnoremap < <gv
vnoremap > >gv

" Apply . repeats to the visual block
vnoremap . :normal .<CR>

" Remove the highlighted search after two esc
nnoremap <esc><esc> :noh<return><esc>

map Y y$
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Paste mode toggler
map <leader>p :set invpaste paste?<CR>

" Window navigation mappings
map <leader>n <ESC>:NERDTreeToggle<RETURN>
map <leader>f <ESC>:NERDTreeFind<RETURN>
noremap <C-J>     <C-W>j
noremap <C-K>     <C-W>k
noremap <C-H>     <C-W>h
noremap <C-L>     <C-W>l
" }

" Backups {
set nobackup
set nowritebackup
set noswapfile
" }

" GUI STUFF
if has("gui_running")
    set guioptions-=T " no toolbar set guioptions-=m " no menus
    set guioptions-=r " no scrollbar on the right
    set guioptions-=R " no scrollbar on the right
    set guioptions-=l " no scrollbar on the left
    set guioptions-=b " no scrollbar on the bottom

    set guifont=*
    set guifont=Knack\ Regular\ Nerd\ Font\ Complete:h14
endif
